using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.DirectoryServices;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace Trump_s_Website_Deporter_TM
{
    public partial class MainForm : Form
    {
        static string heading = 
            "# Copyright (c) 1993-2009 Microsoft Corp." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# This is a sample HOSTS file used by Microsoft TCP/IP for Windows." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# This file contains the mappings of IP addresses to host names. Each" + Environment.NewLine +
            "# entry should be kept on an individual line. The IP address should" + Environment.NewLine +
            "# be placed in the first column followed by the corresponding host name." + Environment.NewLine +
            "# The IP address and the host name should be separated by at least one" + Environment.NewLine +
            "# space." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# Additionally, comments (such as these) may be inserted on individual" + Environment.NewLine +
            "# lines or following the machine name denoted by a '#' symbol." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# For example:" + Environment.NewLine +
            "#" + Environment.NewLine +
            "#      102.54.94.97     rhino.acme.com          # source server" + Environment.NewLine +
            "#       38.25.63.10     x.acme.com              # x client host" + Environment.NewLine +
            "            " + Environment.NewLine +
            "# localhost name resolution is handled within DNS itself." + Environment.NewLine +
            "#	127.0.0.1       localhost" + Environment.NewLine +
            "#	::1             localhost" + Environment.NewLine +
            "";

        static ArrayList hosts = new ArrayList();
        static List<string> systemList = new List<string>();
        static List<string> checkedSystems = new List<string>();
        static string tag = "# Generated by Website Blocker Tool";

        public MainForm()
        {
            InitializeComponent();
        }

        private void refresh(string system = null)
        {
            string hostsDir = @"c:\Windows\System32\Drivers\etc\hosts";
            string remoteHostsDir = @"c:\Windows\Temp\twdtm_rhosts.txt";
            hosts.Clear();
            checkedSystems.Clear();
            LstBoxBlocked.Items.Clear();

            if (ChkBoxLocal.Checked || system == null)
            {
                hosts.AddRange(
                    File.ReadAllLines(hostsDir));
            } else
            {
                TxtBoxStatus.Text = "Connecting...";
                string command = $"\\\\{system} -noname -h -n 5 cmd.exe /c \"type {hostsDir}\" >{remoteHostsDir}";
                int status = PaExecRun(command);
                if (status == 0)
                    TxtBoxStatus.Text = "Success!";
                else
                    TxtBoxStatus.Text = "Failed!";
                MessageBox.Show(status.ToString());
                try
                {
                    hosts.AddRange(
                        File.ReadAllLines(@"c:\Windows\Temp\twdtm_rhosts.txt"));
                }
                catch
                {
                    return;
                }
            }

            foreach (string line in hosts)
            {
                if (line.Contains(tag) && line.Length > tag.Length + 1)
                    LstBoxBlocked.Items.Add(line.Split(null)[2]);
            }

            systemList.Clear();

            ChkLstBoxSystems.Enabled = false;
            BtnRecieve.Enabled = false;
            BtnApply.Enabled = false;

            TxtBoxStatus.Text = "Scanning...";

            backgroundWorker.RunWorkerAsync(); 
            TxtBoxURL.Clear();
        }

        private int cmdKeyRun(string command)
        {
            Process cmdTask = new Process();
            cmdTask.StartInfo.FileName = "cmdkey.exe";
            cmdTask.StartInfo.Arguments = command;
            //cmdTask.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            //cmdTask.StartInfo.UseShellExecute = false;
            //cmdTask.StartInfo.RedirectStandardOutput = true;
            //cmdTask.StartInfo.RedirectStandardError = true;
            cmdTask.Start();
            cmdTask.WaitForExit();
            return cmdTask.ExitCode;
        }

        private int PaExecRun(string command)
        {
            string paexecDir = "C:\\Windows\\Temp\\paexec.exe";
            
            File.WriteAllBytes(paexecDir,
                    Properties.Resources.paexec
                    );

            Process remoteTask = new Process();
            remoteTask.StartInfo.FileName = paexecDir;
            remoteTask.StartInfo.Arguments = command;
            //remoteTask.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            //remoteTask.StartInfo.UseShellExecute = false;
            //remoteTask.StartInfo.RedirectStandardOutput = true;
            //remoteTask.StartInfo.RedirectStandardError = true;
            remoteTask.Start();
            remoteTask.WaitForExit();
            try
            {
                File.Delete(paexecDir);
            } catch { }
            return remoteTask.ExitCode;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            refresh();
        }

        public static string ObjectToString(object obj)
        {
            return obj.ToString();
        }

        static private string TrimStart(string value, string param)
        {
            if (value.Contains(param))
                return value.Substring(value.IndexOf(param) + param.Length);
            else
                return value;
        }

        static private string TrimEnd(string value, string param)
        {
            if (value.Contains(param))
                return value.Substring(0, value.IndexOf(param));
            else
                return value;
        }

        static public List<string> ProcessURLs(string[] URLs)
        {
            List<string> newURLs = new List<string>(URLs);
            List<string> processedURLs = new List<string>();
            foreach (string url in newURLs)
                processedURLs.Add(TrimEnd(TrimStart(url, "://"), "/").Trim());

            return processedURLs;
        }

        static private string LinesToString(string[] lines)
        {
            StringBuilder final = new StringBuilder();
            foreach (string line in lines)
                final.Append(line + Environment.NewLine);
            return final.ToString();
        }

        public List<string> UpdateNetworkComputers()
        {
            List<string> localComputers = new List<string>();

            DirectoryEntry root = new DirectoryEntry("WinNT:");
            foreach (DirectoryEntry computers in root.Children)
                foreach (DirectoryEntry computer in computers.Children)
                {
                    if (computer.SchemaClassName == "Computer")
                        localComputers.Add(computer.Name);
                }

            BeginInvoke((MethodInvoker)delegate
            { ChkLstBoxSystems.Items.Clear(); });

            foreach (string system in localComputers)
                BeginInvoke((MethodInvoker)delegate
                { ChkLstBoxSystems.Items.Add(system); });

            return localComputers;
        }


        private void backgroundWorker1_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            systemList.AddRange(UpdateNetworkComputers());
        }

        private void backgroundWorker_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            ChkLstBoxSystems.Enabled = true;
            BtnRecieve.Enabled = true;
            BtnApply.Enabled = true;
            TxtBoxStatus.Text = "Done.";
        }

        private void LstBoxBlocked_Click(object sender, EventArgs e)
        {
            try
            {
                TxtBoxURL.Clear();
                foreach (string item in LstBoxBlocked.SelectedItems)
                    TxtBoxURL.AppendText(Environment.NewLine + item);
                TxtBoxURL.Text = TrimStart(TxtBoxURL.Text, Environment.NewLine);
            } catch
            { }
        }

        public static void WriteListToHosts(List<string> urls,bool remote)
        {
            ArrayList toWrite = new ArrayList();

            toWrite.Add(heading);

            foreach (string url in urls)
            {
                string site = url;
                if (site.StartsWith("www."))
                    toWrite.Add("127.0.0.1  " + site + " " + site.Substring(4) + " " + tag);
                else
                    toWrite.Add("127.0.0.1  " + site + " " + tag);
            }

            string[] final = Array.ConvertAll(
                    toWrite.ToArray(),
                    new Converter<object, string>(ObjectToString)
                    );

            //MessageBox.Show(LinesToString(final));
            
            File.WriteAllText(
                @"c:\Windows\System32\Drivers\etc\hosts",
                LinesToString(final)
                );
        }

        private void BtnAdd_Click(object sender, EventArgs e)
        {
            List<string> newURLs = ProcessURLs(
                TxtBoxURL.Text.Split(
                    new string[] { Environment.NewLine }, 
                    StringSplitOptions.None
                    )
                );

            foreach (string url in newURLs)
            {
                if (url == null || url == "" || url.Length <= 1) continue;

                bool exists = false;
                foreach (object existingURL in LstBoxBlocked.Items)
                    if (existingURL.ToString().Contains(url)) exists = true;
                if (exists) continue;

                LstBoxBlocked.Items.Add(url);
            }

            TxtBoxURL.Clear();
        }

        private void BtnRemove_Click(object sender, EventArgs e)
        {
            List<string> toRemove = ProcessURLs(
                TxtBoxURL.Text.Split(
                    new string[] { Environment.NewLine },
                    StringSplitOptions.None
                    )
                );

            List<string> exists = new List<string>();
            foreach (object url in LstBoxBlocked.Items)
                if (toRemove.Contains(url.ToString()))
                    exists.Add(url.ToString());

            if (exists.Count == 0) return;

            foreach (string url in exists)
            {
                LstBoxBlocked.Items.RemoveAt(
                    LstBoxBlocked.Items.IndexOf(url)
                    );
            }

            TxtBoxURL.Clear();
        }

        private void BtnApply_Click(object sender, EventArgs e)
        {
            List<string> newURLs = new List<string>();
            string args = "";
            foreach (object url in LstBoxBlocked.Items)
            {
                newURLs.Add(url.ToString());
                args += $"\"{url.ToString()}\"" + " ";
            }

            if (args == "") return;

            if (ChkBoxLocal.Checked)
            {
                WriteListToHosts(newURLs,false);
                refresh();
            }
            else
            {
                if (checkedSystems.Count == 0) return;
                string machineList = "C:\\Windows\\Temp\\twdtm_machines.txt";
                string currentProgram = Process.GetCurrentProcess().MainModule.FileName;
                string uploadLocation = @"C:\Windows\Temp\Trump's Website Deporter TM.exe";
                File.Copy(currentProgram, uploadLocation, true);

                if (File.Exists(machineList))
                    File.Delete(machineList);

                using (StreamWriter sw = File.CreateText(machineList))
                {
                    foreach (string system in checkedSystems)
                        sw.WriteLine(system);
                }

                TxtBoxStatus.Text = "Connecting...";
                string command = $"@{machineList} -noname -h -n 5 -c \"{uploadLocation}\" {args}";
                int status = PaExecRun(command);
                if (status == 0)
                    TxtBoxStatus.Text = "Success!";
                else
                    TxtBoxStatus.Text = "Failed!";
                MessageBox.Show(status.ToString());
                refresh();
            }
        }

        private void BtnRecieve_Click(object sender, EventArgs e)
        {
            if (checkedSystems.Count > 0)
            refresh(checkedSystems[0]);
        }

        private void TxtBoxSearch_TextChanged(object sender, EventArgs e)
        {
            ChkLstBoxSystems.Items.Clear();
            foreach (string system in systemList)
            {
                if (system.Contains(TxtBoxSearch.Text))
                {
                    ChkLstBoxSystems.Items.Add(system);
                    if (checkedSystems.Contains(system))
                        ChkLstBoxSystems.SetItemChecked(
                            ChkLstBoxSystems.Items.IndexOf(system), 
                            true
                            );
                }
            }
        }

        private void ChkLstBoxSystems_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (CheckState.Unchecked == e.CurrentValue)
            {
                checkedSystems.Add(ChkLstBoxSystems.Items[e.Index].ToString());
            } else
            {
                checkedSystems.Remove(ChkLstBoxSystems.Items[e.Index].ToString());
            }
        }
    }
}
