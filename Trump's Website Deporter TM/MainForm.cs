using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.DirectoryServices;
using System.IO;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace Trump_s_Website_Deporter_TM
{
    public partial class MainForm : Form
    {
        static string heading = 
            "# Copyright (c) 1993-2009 Microsoft Corp." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# This is a sample HOSTS file used by Microsoft TCP/IP for Windows." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# This file contains the mappings of IP addresses to host names. Each" + Environment.NewLine +
            "# entry should be kept on an individual line. The IP address should" + Environment.NewLine +
            "# be placed in the first column followed by the corresponding host name." + Environment.NewLine +
            "# The IP address and the host name should be separated by at least one" + Environment.NewLine +
            "# space." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# Additionally, comments (such as these) may be inserted on individual" + Environment.NewLine +
            "# lines or following the machine name denoted by a '#' symbol." + Environment.NewLine +
            "#" + Environment.NewLine +
            "# For example:" + Environment.NewLine +
            "#" + Environment.NewLine +
            "#      102.54.94.97     rhino.acme.com          # source server" + Environment.NewLine +
            "#       38.25.63.10     x.acme.com              # x client host" + Environment.NewLine +
            "            " + Environment.NewLine +
            "# localhost name resolution is handled within DNS itself." + Environment.NewLine +
            "#	127.0.0.1       localhost" + Environment.NewLine +
            "#	::1             localhost" + Environment.NewLine +
            "";

        static ArrayList hosts = new ArrayList();
        static List<string> permittedSystems = new List<string>();
        static List<string> systemList = new List<string>();
        static List<string> checkedSystems = new List<string>();
        static string tag = "# Generated by Website Blocker Tool";
        static string hostsDir = @"c:\Windows\System32\Drivers\etc\hosts";
        static string remoteHostsDir = @"c:\Windows\Temp\twdtm_rhosts.txt";
        static string machineList = "C:\\Windows\\Temp\\twdtm_machines.txt";
        static string currentProgram = Process.GetCurrentProcess().MainModule.FileName;
        static string uploadLocation = @"C:\Windows\Temp\twdtm.exe";
        static string lastCommand;
        static bool doRefresh = false;
        static bool teachersEdition = false;
        static bool busy = true;

        public MainForm()
        {
            InitializeComponent();
            if (!Decrypt().StartsWith("VALID_FILE"))
            {
                MessageBox.Show(
                    "The 'systems' file in the directory is corrupt. Please request a file from Stickles ;)",
                    "Critical file broken",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error
                );
                Environment.Exit(3);
            }

            string[] keys = Decrypt().Split('|');
            foreach (string key in keys)
            {
                if (key == keys[0] || key == "") continue;
                if (key == "#$TEACHER'SEDITION$#")
                {
                    teachersEdition = true;
                    BtnExport.Visible = true;
                    BtnExport.Enabled = true;
                }
                else
                    permittedSystems.Add(key);
            }
        }

        private void refresh()
        {
            busy = true;
            hosts.Clear();
            checkedSystems.Clear();
            LstBoxBlocked.Items.Clear();

            systemList.Clear();
            TxtBoxURL.Clear();

            BackWorkerSystemList.RunWorkerAsync(); 
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            refresh();
        }

        public static string ObjectToString(object obj)
        {
            return obj.ToString();
        }

        static private string TrimStart(string value, string param)
        {
            if (value.Contains(param))
                return value.Substring(value.IndexOf(param) + param.Length);
            else
                return value;
        }

        static private string TrimEnd(string value, string param)
        {
            if (value.Contains(param))
                return value.Substring(0, value.IndexOf(param));
            else
                return value;
        }

        static public List<string> ProcessURLs(string[] URLs)
        {
            List<string> newURLs = new List<string>(URLs);
            List<string> processedURLs = new List<string>();
            foreach (string url in newURLs)
                processedURLs.Add(TrimEnd(TrimStart(url, "://"), "/").Trim());

            return processedURLs;
        }

        static private string LinesToString(string[] lines)
        {
            StringBuilder final = new StringBuilder();
            foreach (string line in lines)
                final.Append(line + Environment.NewLine);
            return final.ToString();
        }

        public static string DecryptTripleDES(string input)
        {
            byte[] inputArray = Convert.FromBase64String(input);
            TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
            tripleDES.Key = new byte[] { 0xf7, 0x60, 0x9a, 0x0e, 0xdf, 0x0d, 0x0e, 0x79, 0x93, 0x2f, 0x74, 0x1e, 0x17, 0x9d, 0x94, 0xc7 };
            tripleDES.Mode = CipherMode.ECB;
            tripleDES.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tripleDES.CreateDecryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
            tripleDES.Clear();
            return UTF8Encoding.UTF8.GetString(resultArray);
        }

        public static byte[] BitArrayToByteArray(BitArray bits)
        {
            byte[] ret = new byte[(bits.Length - 1) / 8 + 1];
            bits.CopyTo(ret, 0);
            return ret;
        }

        public string Decrypt()
        {
            try
            {
                BitArray encrypted = new BitArray(File.ReadAllBytes("systems"));
                List<bool> decrypted = new List<bool>();
                int counter = 0;

                foreach (bool b in encrypted)
                    decrypted.Add((counter++ % 3 == 0) ? !b : b);

                BitArray permissions = new BitArray(decrypted.ToArray());
                string shiftedContents = Encoding.Default.GetString(BitArrayToByteArray(permissions));
                return DecryptTripleDES(shiftedContents);
            }
            catch (Exception ex)
            {
                return "invalid";
            }
        }

        public static bool PingHost(string nameOrAddress)
        {
            bool pingable = false;
            Ping pinger = null;

            try
            {
                pinger = new Ping();
                PingReply reply = pinger.Send(nameOrAddress);
                pingable = reply.Status == IPStatus.Success;
            }
            catch (PingException)
            {
                // Discard PingExceptions and return false;
            }
            finally
            {
                if (pinger != null)
                {
                    pinger.Dispose();
                }
            }

            return pingable;
        }

        public List<string> UpdateNetworkComputers()
        {
            BeginInvoke((MethodInvoker)delegate
            { PrgrsBarRemote.Value = 1; });
            
            List<string> localComputers = new List<string>();

            if (teachersEdition)
            {
                DirectoryEntry root = new DirectoryEntry("WinNT:");
                foreach (DirectoryEntry computers in root.Children)
                    foreach (DirectoryEntry computer in computers.Children)
                    {
                        if (computer.SchemaClassName == "Computer")
                            localComputers.Add(computer.Name);
                    }
            } else
            {
                foreach (string system in permittedSystems)
                    localComputers.Add((PingHost(system)) ? system : system + " - Cannot connect");
            }

            BeginInvoke((MethodInvoker)delegate
            {
                ChkLstBoxSystems.Items.Clear();
                foreach (string system in localComputers)
                {
                    ChkLstBoxSystems.Items.Add(system, 
                        (system.EndsWith(" - Cannot connect")) ? CheckState.Indeterminate : CheckState.Unchecked);
                }
            });

            

            return localComputers;
        }

        private void LstBoxBlocked_Click(object sender, EventArgs e)
        {
            try
            {
                TxtBoxURL.Clear();
                foreach (string item in LstBoxBlocked.SelectedItems)
                    TxtBoxURL.AppendText(Environment.NewLine + item);
                TxtBoxURL.Text = TrimStart(TxtBoxURL.Text, Environment.NewLine);
            } catch
            { }
        }

        public static void WriteListToHosts(List<string> urls,bool remote)
        {
            ArrayList toWrite = new ArrayList();

            toWrite.Add(heading);

            foreach (string url in urls)
            {
                string site = url;
                if (site.StartsWith("www."))
                    toWrite.Add("127.0.0.1  " + site + " " + site.Substring(4) + " " + tag);
                else
                    toWrite.Add("127.0.0.1  " + site + " " + tag);
            }

            string[] final = Array.ConvertAll(
                    toWrite.ToArray(),
                    new Converter<object, string>(ObjectToString)
                    );
            
            File.WriteAllText(
                @"c:\Windows\System32\Drivers\etc\hosts",
                LinesToString(final)
                );
        }

        private void BtnAdd_Click(object sender, EventArgs e)
        {
            List<string> newURLs = ProcessURLs(
                TxtBoxURL.Text.Split(
                    new string[] { Environment.NewLine }, 
                    StringSplitOptions.None
                    )
                );

            foreach (string url in newURLs)
            {
                if (url == null || url == "" || url.Length <= 1) continue;

                bool exists = false;
                foreach (object existingURL in LstBoxBlocked.Items)
                    if (existingURL.ToString().Contains(url)) exists = true;
                if (exists) continue;

                LstBoxBlocked.Items.Add(url);
            }

            TxtBoxURL.Clear();
        }

        private void BtnRemove_Click(object sender, EventArgs e)
        {
            List<string> toRemove = ProcessURLs(
                TxtBoxURL.Text.Split(
                    new string[] { Environment.NewLine },
                    StringSplitOptions.None
                    )
                );

            List<string> exists = new List<string>();
            foreach (object url in LstBoxBlocked.Items)
                if (toRemove.Contains(url.ToString()))
                    exists.Add(url.ToString());

            if (exists.Count == 0) return;

            foreach (string url in exists)
            {
                LstBoxBlocked.Items.RemoveAt(
                    LstBoxBlocked.Items.IndexOf(url)
                    );
            }

            TxtBoxURL.Clear();
        }

        private void BtnApply_Click(object sender, EventArgs e)
        {
            List<string> newURLs = new List<string>();
            string args = "";
            foreach (object url in LstBoxBlocked.Items)
            {
                newURLs.Add(url.ToString());
                args += $"\"{url.ToString()}\"" + " ";
            }

            if (ChkBoxLocal.Checked)
            {
                WriteListToHosts(newURLs,false);
                refresh();
            }
            else
            {
                if (checkedSystems.Count == 0)
                {
                    TxtBoxLog.Text = "Please select ONE system to configure.";
                    return;
                }
                File.Copy(currentProgram, uploadLocation, true);

                if (File.Exists(machineList))
                    File.Delete(machineList);

                using (StreamWriter sw = File.CreateText(machineList))
                {
                    foreach (string system in checkedSystems)
                        sw.WriteLine(system);
                }

                PaExecApplyInfo(args);
            }
        }

        private void BtnRecieve_Click(object sender, EventArgs e)
        {
            if (!ChkBoxLocal.Checked && checkedSystems.Count == 1)
            {
                PaExecPullInfo(checkedSystems[0]);
            }
            else if (ChkBoxLocal.Checked)
            {
                hosts.Clear();

                hosts.AddRange(
                    File.ReadAllLines(hostsDir));

                LstBoxBlocked.Items.Clear();

                foreach (string line in hosts)
                {
                    if (line.Contains(tag) && line.Length > tag.Length + 1)
                        LstBoxBlocked.Items.Add(line.Split(null)[2]);
                }

                TxtBoxLog.Text = "Successfully read local restrictions.";
            } else
            {
                TxtBoxLog.Text = "Please select ONE system to search.";
            }
        }

        private void TxtBoxSearch_TextChanged(object sender, EventArgs e)
        {
            List<string> lines = new List<string>(
                TxtBoxSearch.Text.Split(
                    new string[] { Environment.NewLine },
                    StringSplitOptions.None
                    ));

            ChkLstBoxSystems.Items.Clear();
            foreach (string system in systemList)
            {
                foreach (string line in lines)
                if (system.Contains(line) && line != "")
                {
                    ChkLstBoxSystems.Items.Add(system);
                    if (checkedSystems.Contains(system))
                        ChkLstBoxSystems.SetItemChecked(
                            ChkLstBoxSystems.Items.IndexOf(system), 
                            true
                            );
                }
            }
        }

        private void ChkLstBoxSystems_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (busy) return;
            if (e.CurrentValue == CheckState.Indeterminate)
            {
                e.NewValue = CheckState.Indeterminate;
                return;
            }
            string system = ChkLstBoxSystems.Items[e.Index].ToString();
            if (CheckState.Unchecked == e.CurrentValue && !checkedSystems.Contains(system))
            {
                checkedSystems.Add(system);
            } else
            {
                checkedSystems.Remove(system);
            }
        }

        private int PaExecRun()
        {
            BeginInvoke((MethodInvoker)delegate
            {
                BtnRecieve.Enabled = false;
                BtnApply.Enabled = false;
                ChkLstBoxSystems.Enabled = false;
                LstBoxBlocked.Enabled = false;
                PrgrsBarRemote.Value = 1;
            });

            string paexecDir = "C:\\Windows\\Temp\\paexec.exe";

            File.WriteAllBytes(paexecDir,
                    Properties.Resources.paexec
                    );

            Process remoteTask = new Process();
            remoteTask.StartInfo.FileName = "cmd.exe";
            remoteTask.StartInfo.Arguments = "/c " + paexecDir + " " + lastCommand;
            remoteTask.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            remoteTask.Start();
            remoteTask.WaitForExit();

            try
            {
                File.Delete(paexecDir);
            }
            catch { }
            return remoteTask.ExitCode;
        }

        private void PaExecPullInfo(string system)
        {
            doRefresh = true;
            string command = $"\\\\{system} -noname -h -n 5 cmd.exe /c \"type {hostsDir}\" >{remoteHostsDir}";
            lastCommand = command;
            BackWorkerRemote.RunWorkerAsync();
        }

        private void PaExecApplyInfo(string websites)
        {
            doRefresh = false;
            string command = $"@{machineList} -noname -h -d -n 5 -c \"{uploadLocation}\" \"websitesHere-->\" {websites}";
            lastCommand = command;
            BackWorkerRemote.RunWorkerAsync();
        }

        private void BackWorkerSystemList_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            BeginInvoke((MethodInvoker)delegate
            {
                ChkLstBoxSystems.Enabled = false;
                BtnRecieve.Enabled = false;
                BtnApply.Enabled = false;
                BtnRefresh.Enabled = false;
            });
            
            systemList.AddRange(UpdateNetworkComputers());
        }

        private void BackWorkerSystemList_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            PrgrsBarRemote.Value = 0;
            ChkLstBoxSystems.Enabled = true;
            BtnRecieve.Enabled = true;
            BtnApply.Enabled = true;
            BtnRefresh.Enabled = true;
            busy = false;
            TxtBoxLog.Text = "Found systems online!";
        }

        private void BackWorkerRemote_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            PaExecRun();
        }

        private void BackWorkerRemote_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            BtnRecieve.Enabled = true;
            BtnApply.Enabled = true;
            ChkLstBoxSystems.Enabled = true;
            LstBoxBlocked.Enabled = true;
            PrgrsBarRemote.Value = 0;

            if (doRefresh)
            {
                hosts.Clear();
                LstBoxBlocked.Items.Clear();

                try
                {
                    hosts.AddRange(
                        File.ReadAllLines(@"c:\Windows\Temp\twdtm_rhosts.txt"));
                    File.Delete(@"c:\Windows\Temp\twdtm_rhosts.txt");
                    TxtBoxLog.Text = "Successfully recieved blocked websites.";
                }
                catch {
                    TxtBoxLog.Text = "Failed to recieve blocked websites.";
                    return;
                }

                foreach (string line in hosts)
                {
                    if (line.Contains(tag) && line.Length > tag.Length + 1)
                        LstBoxBlocked.Items.Add(line.Split(null)[2]);
                }

            } else
            {
                TxtBoxLog.Text = "Done! It may take a moment for changes to apply.";
            }
        }

        public static string EncryptTripleDES(string input)
        {
            byte[] inputArray = UTF8Encoding.UTF8.GetBytes(input);
            TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
            tripleDES.Key = new byte[] { 0xf7, 0x60, 0x9a, 0x0e, 0xdf, 0x0d, 0x0e, 0x79, 0x93, 0x2f, 0x74, 0x1e, 0x17, 0x9d, 0x94, 0xc7 };
            tripleDES.Mode = CipherMode.ECB;
            tripleDES.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tripleDES.CreateEncryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
            tripleDES.Clear();
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }

        public byte[] Encrypt(string keyFile)
        {
            string shifted = EncryptTripleDES(keyFile);
            BitArray decrypted = new BitArray(Encoding.UTF8.GetBytes(shifted));
            List<bool> encrypted = new List<bool>();
            int counter = 0;

            foreach (bool b in decrypted)
                encrypted.Add((counter++ % 3 == 0) ? !b : b);

            BitArray permissions = new BitArray(encrypted.ToArray());
            return BitArrayToByteArray(permissions);
        }

        private void BtnExport_Click(object sender, EventArgs e)
        {
            string keyFile = "VALID_FILE|";
            foreach (string system in checkedSystems)
            {
                keyFile += system + '|';
            }
            File.WriteAllBytes("compiled_systems", Encrypt(keyFile));
            TxtBoxLog.Text = "Systems file has been generated!";
        }

        private void BtnRefresh_Click(object sender, EventArgs e)
        {
            refresh();
        }
    }
}
